// <auto-generated />
using System;
using ControllRR.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ControllRR.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ControllRRContext))]
    [Migration("20250304230648_EntityCestNew")]
    partial class EntityCestNew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ControllRR.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Register")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.CEST", b =>
                {
                    b.Property<string>("CodigoTbc")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DescTbc")
                        .HasColumnType("longtext");

                    b.Property<int>("LegalTbc")
                        .HasColumnType("int");

                    b.Property<int>("NcmTbc")
                        .HasColumnType("int");

                    b.HasKey("CodigoTbc");

                    b.ToTable("CESTs");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.CFOP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Codigo_Cfop")
                        .HasColumnType("double");

                    b.Property<string>("Desc_Cfop")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CFOPs");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.CNAE", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo_Cnae")
                        .HasColumnType("longtext");

                    b.Property<string>("Desc_Cnae")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CNAEs");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.COFINS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Codigo_Cofins")
                        .HasColumnType("int");

                    b.Property<string>("Desc_Cofins")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("COFINs");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.CSOSN", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Codigo_Csosn")
                        .HasColumnType("int");

                    b.Property<string>("Desc_Csosn")
                        .HasColumnType("longtext");

                    b.Property<string>("Name_Csosn")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CSOSNs");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.ICMS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Codigo_Icms")
                        .HasColumnType("int");

                    b.Property<string>("Desc_Icms")
                        .HasColumnType("longtext");

                    b.Property<int?>("Id_Icms")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ICMs");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.IPI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cod_Ipi")
                        .HasColumnType("longtext");

                    b.Property<string>("Desc_Ipi")
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Ipi")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IPIs");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.IcmsDesoneracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Codigo_Icms_Desoneracao")
                        .HasColumnType("int");

                    b.Property<string>("Desc_Icms_Desoneracao")
                        .HasColumnType("longtext");

                    b.Property<int?>("Id_Icms_Desoneracao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IcmsDesoneracaos");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.IcmsModalidadeBC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Codigo_Icms_Modalidade_bc")
                        .HasColumnType("int");

                    b.Property<string>("Desc_Icms_Modalidade_bc")
                        .HasColumnType("longtext");

                    b.Property<int?>("Id_Icms_Modalidade_bc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IcmsModalidadeBCs");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.IcmsModalidadeST", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Codigo_Icms_Modalidade_st")
                        .HasColumnType("int");

                    b.Property<string>("Desc_Icms_Modalidade_st")
                        .HasColumnType("longtext");

                    b.Property<int?>("Id_Icms_Modalidade_st")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IcmsModalidadeSTs");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.IcmsOrigem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo_Icms_Origem")
                        .HasColumnType("longtext");

                    b.Property<string>("Desc_Icms_Origem")
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Icms_Origem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IcmsOrigems");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.IpiEnquadramento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo_Ipi_Enquadramento")
                        .HasColumnType("longtext");

                    b.Property<string>("Desc_Ipi_Enquadramento")
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Ipi_Enquadramento")
                        .HasColumnType("int");

                    b.Property<int>("Id_Ipi_Operacao")
                        .HasColumnType("int");

                    b.Property<int?>("IpiOperacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IpiOperacaoId");

                    b.ToTable("IpiEnquadramentos");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.IpiOperacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Id_Ipi_Operacao")
                        .HasColumnType("int");

                    b.Property<string>("Nome_Ipi_Operacao")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IpiOperacoes");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.NCM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cod_Ncm")
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Ncm")
                        .HasColumnType("int");

                    b.Property<string>("Nome_Ncm")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("NCMs");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.PIS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cod_Pis")
                        .HasColumnType("int");

                    b.Property<string>("Desc_Pis")
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Pis")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PIS");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Neigh")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<string>("WhattsApp")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CPF_CNPJ")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CPF_CNPJ")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DeviceDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.FinancialRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalTaxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("FinancialRecords");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Maintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("DeviceId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("MaintenanceNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SimpleDesc")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Maintenances");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.MaintenanceNumberControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CurrentNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceNumberControls");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.MaintenanceProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.HasIndex("StockId");

                    b.ToTable("MaintenanceProduct");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodeBar")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductFullName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductManufacturer")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.PurchaseItem", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CFOPId")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("CofinsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CofinsBase")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("IcmsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("IcmsBase")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("PisAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("PisBase")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("StockId");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FreightMode")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("IssuerCNPJ")
                        .HasColumnType("longtext");

                    b.Property<string>("IssuerIE")
                        .HasColumnType("longtext");

                    b.Property<string>("NFeAccessKey")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("NFeEmissionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("NFeSource")
                        .HasColumnType("int");

                    b.Property<int?>("NFeStatus")
                        .HasColumnType("int");

                    b.Property<int?>("OperationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNFeKey")
                        .HasColumnType("longtext");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("TotalTaxes")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("OrderDate")
                        .HasDatabaseName("IX_PurchaseOrders_OrderDate");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalTaxes")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.HasIndex("StockId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RequesterName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ServerIP")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ServerPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.ServerLogin", b =>
                {
                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ServerId", "LoginId");

                    b.HasIndex("LoginId");

                    b.ToTable("ServerLogins");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CFOPId")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("CofinsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CofinsBase")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("IcmsAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("IcmsBase")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("PisAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("PisBase")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("PriceSugested")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ProductApplication")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductBarCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductInternalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductReference")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Profit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductName")
                        .HasDatabaseName("IX_Stocks_ProductName");

                    b.HasIndex("SupplierId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.StockManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MaintenanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SaleId");

                    b.HasIndex("StockId");

                    b.ToTable("StockManagements");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivityArea")
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CRT")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("FantasyName")
                        .HasColumnType("longtext");

                    b.Property<string>("IssuerIE")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("PersonType")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.SystemRoutine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AutoUpdate")
                        .HasColumnType("longtext");

                    b.Property<int?>("Dashboard")
                        .HasColumnType("int");

                    b.Property<string>("PathProject")
                        .HasColumnType("longtext");

                    b.Property<string>("Protocol")
                        .HasColumnType("longtext");

                    b.Property<int?>("Scripts")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SystemRoutines");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.TaxConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("TaxType")
                        .HasColumnType("int");

                    b.Property<string>("TaxTypeBR")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("TaxConfigurations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.BrazilianTaxs.IpiEnquadramento", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.BrazilianTaxs.IpiOperacao", "IpiOperacao")
                        .WithMany()
                        .HasForeignKey("IpiOperacaoId");

                    b.Navigation("IpiOperacao");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.ContactInfo", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.Customer", "Customer")
                        .WithOne("ContactInfo")
                        .HasForeignKey("ControllRR.Domain.Entities.ContactInfo", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Device", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.Sector", "Sector")
                        .WithMany("Devices")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.FinancialRecord", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("FinancialRecords")
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Maintenance", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Maintenances")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ControllRR.Domain.Entities.Device", "Device")
                        .WithMany("Maintenances")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.MaintenanceProduct", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.Maintenance", "Maintenance")
                        .WithMany("MaintenanceProducts")
                        .HasForeignKey("MaintenanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControllRR.Domain.Entities.Stock", "Stock")
                        .WithMany("MaintenanceProducts")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maintenance");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.PurchaseItem", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControllRR.Domain.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Sale", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.Sale", "Sale")
                        .WithMany("Items")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControllRR.Domain.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.ServerLogin", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.Login", "Login")
                        .WithMany("ServerLogins")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControllRR.Domain.Entities.Server", "Server")
                        .WithMany("ServerLogins")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Stock", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.StockManagement", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.Maintenance", "Maintenance")
                        .WithMany()
                        .HasForeignKey("MaintenanceId");

                    b.HasOne("ControllRR.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("ControllRR.Domain.Entities.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId");

                    b.HasOne("ControllRR.Domain.Entities.Stock", "Stock")
                        .WithMany("Movements")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maintenance");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Sale");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.TaxConfiguration", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControllRR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ControllRR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Maintenances");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Customer", b =>
                {
                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Device", b =>
                {
                    b.Navigation("Maintenances");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Login", b =>
                {
                    b.Navigation("ServerLogins");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Maintenance", b =>
                {
                    b.Navigation("MaintenanceProducts");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("FinancialRecords");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Sale", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Sector", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Server", b =>
                {
                    b.Navigation("ServerLogins");
                });

            modelBuilder.Entity("ControllRR.Domain.Entities.Stock", b =>
                {
                    b.Navigation("MaintenanceProducts");

                    b.Navigation("Movements");
                });
#pragma warning restore 612, 618
        }
    }
}
